{"version":3,"sources":["components/title.jsx","utils/utils.js","components/score.jsx","components/noteid.jsx","components/homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","props","class","value","notes","Score","score","total","synth","Tone","toDestination","NoteID","state","currNote","scale","input","gameTick","bind","newNote","checkInput","setInput","to","this","type","onKeyPress","onChange","event","target","onClick","triggerAttackRelease","setState","octave","Math","floor","random","e","key","console","log","charAt","React","Component","HomePage","id","App","basename","process","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6c891b12.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction LetterTile(props) {\r\n    return (\r\n        <span class=\"\">{props.value}</span>\r\n    );\r\n}\r\n\r\nfunction Title(props) {\r\n    return(\r\n        <div class=\"Title\">\r\n            {props.value}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title;","const notes = ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\r\n\r\nexport function getScale(opts) {\r\n    return notes;\r\n}\r\n\r\nexport function randNote(scale, octave) {\r\n    return scale[Math.floor(Math.random() * 7)] + octave;\r\n}","import React from \"react\";\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <div>\r\n            {props.score} / {props.total}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Score;","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport * as Tone from 'tone';\r\nimport * as Util from '../utils/utils';\r\nimport Title from './title';\r\nimport Score from './score';\r\n\r\nconst synth = new Tone.Synth().toDestination();\r\n\r\nclass NoteID extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            score: 0,\r\n            total: 0,\r\n            currNote: null,\r\n            //** Change This! **//\r\n            scale: Util.getScale('c'),\r\n            input: null,\r\n        }\r\n\r\n        this.gameTick = this.gameTick.bind(this);\r\n        this.newNote = this.newNote.bind(this);\r\n        this.checkInput = this.checkInput.bind(this);\r\n        this.setInput = this.setInput.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Link to=\"/\">Return</Link>\r\n                <Title value=\"Note ID Game\" />\r\n                <Score score={this.state.score} total={this.state.total} />\r\n                <input type=\"text\" onKeyPress={this.checkInput} onChange={event => this.setInput(event.target.value)}></input>\r\n                <div>\r\n                    <button onClick={() => {if(this.state.currNote) {synth.triggerAttackRelease(this.state.currNote, \"4n\");}}}>Reset</button>\r\n                    <button onClick={this.gameTick}>Play</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    async gameTick() {\r\n        this.setState({ total: this.state.total + 1 });\r\n        await this.newNote();\r\n        synth.triggerAttackRelease(this.state.currNote, \"4n\");\r\n    }\r\n\r\n    async newNote() {\r\n        let newNote;\r\n        do {\r\n            newNote = Util.randNote(this.state.scale, 4);\r\n        } while (this.state.currNote == newNote)\r\n        await this.setState({ currNote: newNote });\r\n    }\r\n\r\n    checkInput(e) {\r\n        if(e.key === \"Enter\") {\r\n            console.log(this.state.input + \" == \" + this.state.currNote);\r\n            if(this.state.input == this.state.currNote.charAt(0))  {\r\n                this.setState({ score: this.state.score + 1 });\r\n            }\r\n            this.gameTick();\r\n        }\r\n    }\r\n\r\n    async setInput(value) {\r\n        await this.setState({input: value});\r\n    }\r\n    \r\n}\r\n\r\n// function NoteID() {\r\n//     return (\r\n//         <div>\r\n//             <Link to=\"/\">Return</Link>\r\n//             <Title value=\"Note ID Game\" />\r\n//             <Score score={score} total={total} />\r\n//             <input type=\"text\"></input>\r\n//             {/* <input type=\"text\" onKeyPress={checkInput} onChange={event  => setInput(event.target.value)}></input> */}\r\n//             <div></div>\r\n//             <button onClick={startGame}>Play</button>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\nexport default NoteID;","import React from 'react';\r\nimport Title from './title';\r\nimport { Link } from 'react-router-dom';\r\nimport NoteID from './noteid';\r\nimport {Button} from 'react';\r\n\r\nfunction HomePage() {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Title value=\"Music Theory\" />\r\n                <Title value=\"Games\" />\r\n            </div>\r\n            <div id=\"WP-Options\" class=\"Row\">\r\n                <button class=\"Tile\"><Link to=\"/NoteID\">ear</Link></button>\r\n                <button class=\"Tile\"><Link to=\"/\">sheet</Link></button>\r\n                {/* <Tile value=\"ear\"></Tile>\r\n                <Tile value={(<Link to=\"/NoteID\">ear</Link>)} />\r\n                <Tile value={(<Link to=\"/\">sheet</Link>)} /> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default HomePage;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport HomePage from './components/homepage';\nimport NoteID from './components/noteid';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div class=\"App\">\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route path=\"/NoteID\">\n            <NoteID />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}